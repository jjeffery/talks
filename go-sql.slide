SQL and Go
Options and Opinions
23 Aug 2017

John Jeffery
jjeffery@sp.com.au
https://github.com/jjeffery

* SQL? Really? That old thing?

* SQL

For many of us, working with SQL is a good choice

- Existing infrastructure
- ACID
- Ad-hoc queries
- Highly mature products

* High Availability SQL

CockroachDB

- `https://cockroachlabs.com`
- A cloud-native SQL database for building global, scalable cloud services that survive disasters
- ACID and genuinely distributed
- Written in Go (single executable deployment)
- V1.0 released recently

* High Availability SQL (con't)

Amazon Aurora

- Unbounded database size
- Data replicated over three availablity zones
- MySQL compatible 
- PostgreSQL compatibility is coming

* Go standard library support for SQL

* Go standard library

*database/sql*

- Generic SQL package
- Similar in concept to JDBC, ADO.NET
- Elegant design, small API surface area

*database/sql/driver*

- Defines interfaces to implemented by database drivers
- Typically not referenced directly by application code

* Go standard library (con't)
Features

- Query multiple rows
- Shortcut for querying a single rows
- Transactions
- Prepared statements

* Go standard library (con't)

Package `database/sql` was enhanced in Go 1.8 to include support for

- Querying column types in the `Rows` returned by a query
- Named arguments
- Transaction isolation levels
- Context-aware function variants allowing cancellation of queries
- Some extra driver interfaces

* Go standard library (con't)

Establishing a connection with the DB
.code go-sql/ex1.go /begin open/,/end open/

* Go standard library (con't)

Performing a query

.code go-sql/ex1.go /begin query/,/end query/

* That looks like a lot of effort

.html go-sql/sad-face.html

* FAQ: What's the best ORM for use with Go?

* Typical Reddit/Go Nuts Question

.html go-sql/reddit-question.html

*Typical*Answer* (Hint: use `github.com/jmoiron/sqlx`)

.html go-sql/reddit-answer.html

* github.com/jmoiron/sqlx

.html go-sql/sqlx-banner.html

- Most consistent answer to question: _which_ORM_should_I_use?_
- Package `sqlx` is *not* an ORM
- General purpose extensions to the Go standard library
- Makes some use of reflection, but caches results to improve performance

* github.com/jmoiron/sqlx (con't)

Establishing a connection with the DB

.code go-sql/sqlx1.go /begin open/,/end open/

* github.com/jmoiron/sqlx (con't)

Performing a query

.code go-sql/sqlx1.go /begin query/,/end query/

*Fewer*Lines*Of*Code* (and not too much magic)
.html go-sql/happier-face.html

* I really, really want an ORM: Does Go have any?

* There is no shortage of choice

: Maybe this indicates something?

.html go-sql/orms.html

Source: https://awesome-go.com/#orm

* GORM: The fantastic ORM library for Golang ...

.html go-sql/gorm-stars.html
.html go-sql/gorm.html

Source: https://github.com/jinzhu/gorm (my emphasis added)

* GORM (con't)

- Aims to be a fully featured ORM for Go in the same way (say) Hiberate is for Java
- Amazing effort on the part of the authors
- Maybe a little too much "magic" considering the Go philosophy?

.html go-sql/gorm-example.html

- But can 6,400 github stars can't be wrong, right?

.html go-sql/gorm-stars-2.html

* XORM
.html go-sql/xorm-banner.html

- Another popular choice. `https://xorm.io`
- Similar feature set to GORM
- Used for Gogs (Git hosting app built using Go) `https://gogs.io`

.html go-sql/gogs-screenshot.html

* SQL Boiler

.html go-sql/sqlboiler-banner.html

- `https://github.com/volatiletech/sqlboiler`
- Uses a different approach to GORM, XORM and other 'traditional' ORMs.

_Here's_how_it_works_

- Define your database schema using whatever tools you want
- Generate code using `go generate`
- Your models have been created for you

_Blast_from_the_past_

- Handles relationships between entities quite well
- Reminicent of Entity Framework V3.5, CodeSmith generator (for those with a .NET background)

* My Experience

- Tried `GORM` for a while and found it harder to use that I liked
- Moved to `sqlx` and found it easy to use but I still had some friction points

*...*And*this*might*be*the*point*of*this*presentation*...*

- One of the things I like about using Go is it has changed the way I think about writing software
- I tend to want to rethink and implement solutions to problems differently, with simpler patterns

.html go-sql/highly-opinionated.html

* So where are my friction points and what can I do about them?

.html go-sql/thinking-face.html

* Friction point 1: Lots and lots of columns

.code go-sql/big-insert.go /begin insert sql/,/end insert sql/

- After writing a non-trivial amount of SQL code using `sqlx`, this came up as my number one problem

* Generating SQL columns from code

.code go-sql/big-insert.go /begin insert example/,/end insert example/

* Generating SQL columns from code (con't)

So 

.code go-sql/big-insert.go /begin sqlr line/,/end sqlr line/

Is similar to writing

.code go-sql/big-insert.go /begin mysql line/,/end mysql line/

Or if you are using PostgreSQL

.code go-sql/big-insert.go /begin postgres line/,/end postgres line/

* Generating SQL columns from code (con't)

The trick to being able to insert column lists into arbitrary SQL is you need to:

- Determine the fields in the structure using reflection
- Extract additional schema info from struct field tags (eg primary key, autoincrement)
- Parse the SQL so you know which clause you are inserting into
 select clause                 : `col1`,`col2`,`col3`,`col4`
 insert into clause            : `col1`,`col2`,`col3`,`col4`
 insert into ... values clause : ?,?,?,?
 update ... set clause         : `col1`=?,`col2`=?,`col3`=?,`col4`=?
 update ... where  clause      : `col1`=? and `col2`=? and `col3`=? and `col4`=?

- Have some understanding of the SQL dialect (ie `?` for MySQL vs `$1` for PostgreSQL)
- Understand the naming convention (eg `UserID` field becomes `user_id` column)
- Cache all of the above for performance

* github.com/jjeffery/sqlr

.html go-sql/sqlr-banner.html

.html go-sql/shameless-plug.html

- Documentation is in reasonably good shape
- Test coverage is OK, but room for improvement

* Other 'friction points' that have been addressed

- Null columns
- JSON columns
- WHERE IN clauses with multiple values
- Generating boilerplate code using `go generate`

* Summary

There is a lot of choice in the Go ecosystem for handling SQL queries

- The standard library is a well designed base. Significant enhancements in Go 1.8
- Package `sqlx` is widely used and widely praised
- ORMs may suit your purpose, but you are unlikely to find one with all of the features available in language _Blub_
- If you are interested, please take a look at *github.com/jjeffery/sqlr* -- feedback appreciated





